import React, { useEffect, useState } from 'react'
import noteService from './services/notes'
import './App.css'

import Note from './components/Note'
import Notification from './components/Notification'

const Footer = () => {
  // CSS styling with inline-style
  const footerStyle = {
    color: 'green',
    fontStyle: 'italic',
    fontSize: 16
  }

  return (
    <div style={footerStyle}>
      <br />
      <em>Note app, Department of Computer Science, University of Helsinki {new Date().getFullYear()}</em>
    </div>
  )
}

const App = () => {
  const [notes, setNotes] = useState([])
  const [newNote, setNewNote] = useState('')
  const [showAll, setShowAll] = useState(true) // Initially, all notes are shown
  const [errorMessage, setErrorMessage] = useState(null)

  useEffect(() => {
    noteService
      .getAll()
      .then(initialNotes => {
        setNotes(initialNotes)
      })
  }, [])

  // Function called when submitting the form
  const addNote = (event) => {
    // Prevent default action upon submitting form to happen (page reload)
    event.preventDefault()

    // id is auto-generated by json-server
    const noteObject = {
      content: newNote,
      date: new Date().toISOString(),
      important: Math.random() < 0.5
    }

    noteService
      .create(noteObject)
      .then(createdObject => {
        setNotes(notes.concat(createdObject))
        setNewNote('')
      })
  }

  // Function called when input element is changed
  const handleInputChange = (event) => {
    setNewNote(event.target.value)
  }

  // Function called when toggling show all/ important notes button
  const handleShowNotes = () => {
    setShowAll(!showAll)
  }

  const toggleImportanceOf = (id) => {
    const note = notes.find(note => note.id === id)
    const changedNote = {...note, important: !note.important}

    noteService
      .update(id, changedNote)
      .then(updatedNote => {
        setNotes(notes.map(
          note => {
            if (note.id === changedNote.id) {
              return updatedNote
            }
            
            return note
          }
        ))
      })
      .catch(error => {
        console.log(error)
        setErrorMessage(
          `Note "${note.content}" was already removed from the server`
        )
        setTimeout(() => {
          setErrorMessage(null)
        }, 5000)

        // Remove invalid note object from the notes state
        setNotes(notes.filter(note => note.id !== id))
      })
  }

  // Array of react elements, with 'li' as its base element
  // a tag inside an array (regardless of array count) must have 'key' attribute
  // Note component below is inside an array (generate by .map), therefore 'key' attribute is mandatory
  const notesToShow = showAll ? notes : notes.filter(note => note.important)
  const notesListItem = notesToShow.map(
    note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>
  )

  return (
    <div className='App'>
      <h1>Notes</h1>
      <Notification message={errorMessage} />
      <button onClick={handleShowNotes}>
        Show {showAll ? 'important' : 'all'} notes
      </button>
      <ul>
        {notesListItem}
      </ul>
      <form onSubmit={addNote}>
        <input 
          value={newNote}
          onChange={handleInputChange}
        />
        <button type='submit'>Add</button>
      </form>

      <Footer />
    </div>
  )
}

export default App